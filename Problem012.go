package main

/*
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*/

import (
	"fmt"
	"github.com/TimGJ/Euler/euler"
)

func main() {

	var OldMax int
	var Triangle int
	const Target = 500
	for n := 1; ; n++ {
		Triangle += n
		PrimeFactors := euler.PrimeFactors(Triangle)
		FactorCounts := make(euler.Counter)
		for _, Factor := range PrimeFactors {
			FactorCounts[Factor]++
		}
		Divisors := 1
		for _, s := range FactorCounts {
			Divisors = Divisors * (s + 1)
		}
		if Divisors > OldMax {
			OldMax = Divisors
			fmt.Println(Triangle, Divisors, FactorCounts)
		}
		if Divisors > Target {
			break
		}
	}

}
